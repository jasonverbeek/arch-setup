#!/bin/bash

echo Checking EFI
ls /sys/firmware/efi/efivars &>/dev/null
IS_UEFI=$?
set -e


echo Setting NTP
timedatectl set-ntp true

echo "WARNING: this step will distroy any data on the device"
read -p "Where to install (/dev/sdX)?: " storage_dev
if [ ! -z "${storage_dev}" ]; then
    echo Destroying ${storage_dev}
    wipefs -a ${storage_dev}
    if [ "${IS_UEFI}" -eq "2" ]; then
        echo Setting up for i386
        echo Creating BIOS BOOT partition
        parted -s ${storage_dev} mklabel gpt mkpart primary ext2 0% 200Mib 1> /dev/null
        parted -s ${storage_dev} set 1 bios_grub on 1> /dev/null
        echo Creating root partition
        parted -s ${storage_dev} mkpart primary ext4 200Mib 100% 1> /dev/null
        #parted -s /dev/sda set 1 boot on 1> /dev/null
        mkfs.ext4 ${storage_dev}2 1> /dev/null
        echo Mounting root partition
        mount ${storage_dev}2 /mnt
    else
        echo Setting up for EFI
        echo Creating EFI partition
        parted -s ${storage_dev} mklabel gpt mkpart primary fat32 1Mib 261Mib 1> /dev/null
        parted -s ${storage_dev} set 1 esp on 1> /dev/null
        mkfs.fat -F32 ${storage_dev}1 1> /dev/null
        echo Creating root partition
        parted -s ${storage_dev} mkpart extended ext4 261Mib 100% 1> /dev/null
        mkfs.ext4 ${storage_dev}2 1> /dev/null
        echo Mounting root partition
        mount ${storage_dev}2 /mnt
        echo Mounting EFI partition
        mkdir /mnt/efi
        mount ${storage_dev}1 /mnt/efi
    fi
else
    echo "Error: ${storage_dev} doesn't exist"
    exit 1
fi

echo Pacstrapping system
reflector --latest 5 --sort rate --save /etc/pacman.d/mirrorlist
yes '' | pacstrap /mnt base base-devel linux linux-firmware \
    grub \
    git \
    vim \
    efibootmgr \
    sudo \
    xorg-server \
    qtile \
    lightdm \
    lightdm-gtk-greeter \
    dhcpcd \
    ansible \
    alacritty \
    openssh 
    #rofi \
    #archlinux-wallpaper \
    # nitrogen

echo Generating fstab
genfstab -U /mnt >> /mnt/etc/fstab

function in_chroot {
    arch-chroot /mnt $@
}

echo Setting Timezone
in_chroot ln -sf /usr/share/zoneinfo/Europe/Amsterdam /etc/localtime
echo Setting HW Clock
in_chroot hwclock --systohc

echo Generating Locale
in_chroot sed -i "s/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g" /etc/locale.gen
in_chroot locale-gen
echo LANG=en_US.UTF-8 > /mnt/etc/locale.conf

echo Setting hostname
read -p "Pick a hostname: " hostname

if [ ! -z "${hostname}" ]; then
    echo $hostname > /mnt/etc/hostname
    echo -e "127.0.0.1\tlocalhost" > /mnt/etc/hosts
    echo -e "::1\t\tlocalhost" >> /mnt/etc/hosts
    echo -e "127.0.1.1\t${hostname}.localdomain ${hostname}" >> /mnt/etc/hosts
fi


echo "Installing GRUB bootloader"
if [ "${IS_UEFI}" -eq "2" ]; then
    echo "GRUB for i386-pc"
    in_chroot grub-install --target=i386-pc /dev/sda
else
    echo "GRUB for EFI"
    in_chroot grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB
fi
in_chroot grub-mkconfig -o /boot/grub/grub.cfg


clear
echo Choose root password
in_chroot passwd

in_chroot systemctl enable lightdm
in_chroot systemctl enable sshd

function enableDHCP {
    clear
    in_chroot ip a
    read -p "Which interface do you want to use?: " interface
    if [ ! -z "${interface}" ]; then
        echo "Enabling DHCPCD for ${interface}"
        in_chroot systemctl enable dhcpcd@$interface
    fi
}


echo "Do you want to enable DHCP?"
select yndhcp in "Yes" "No"; do
    case $yndhcp in
        Yes ) enableDHCP; break;;
        No ) break;;
    esac
done


echo "Are you installing on a VirtualBox VM?"
select ynvb in "Yes" "No"; do
    case $ynvb in
        Yes ) in_chroot pacman -S --noconfirm virtualbox-guest-utils; break;;
        No ) break;;
    esac
done




#TODO: use in_chroot function above to remove in_chroot_script, this allows a curl | bash command to install without git
# use localhost8080.org dns to redirect to github raw
#cp in-chroot-script /mnt/
#arch-chroot /mnt bash in-chroot-script "${IS_UEFI}"
#rm /mnt/in-chroot-script


clear
echo Install succesfull
if [ "${IS_UEFI}" -eq "2" ]; then
    echo Shutting down setup
    echo For i386 dont forget the remove the install media before booting
    sleep 4 && shutdown now
else
    echo "Booting into installed EFI system..."
    sleep 4 && reboot now
fi
